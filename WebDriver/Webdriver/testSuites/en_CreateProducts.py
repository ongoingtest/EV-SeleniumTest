#1)Content Verification
#2)Create/delete/modify manufacture
#3)Create products
#4)Search function for media
#5)Search function for products
#6)Drag and Drop function is pending
#7)Upload media function is pending.
#8)Delete the product once finish testing.

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
##from WebDriver.testCase.BaseTestCase import BaseTestCase
import unittest, time, re
import HTMLTestRunner
from selenium.webdriver import ActionChains
from Webdriver.all_globals import *


class EnCreateProducts(unittest.TestCase):
    def setUp(self):
        gb_setUp(self)
    
    def test_en_create_products_content_verification(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        gb_frame(self)
        driver.find_element_by_id("productSearchButton").click()
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "div.corporateLogo"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Create Products", driver.title)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Create Products", driver.find_element_by_id("pageTitle").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='header']/div[2]/div[2]/a/button"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "span.columnHeaderText"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Search Products", driver.find_element_by_css_selector("span.columnHeaderText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Product", driver.find_element_by_id("selectedFilterValue").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Invue Database", driver.find_element_by_id("selectedFilterValue").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "productSearch"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_id("productSearchButton").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Please Select a Product", driver.find_element_by_id("selectProduct").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "div.blockText.selectedText"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("div.bigDownArrow").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Save", driver.find_element_by_css_selector("#productDetailSpace > div.columnHeader > div").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Preview", driver.find_element_by_css_selector("#productDetailSpace > div.columnHeader > div").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Delete", driver.find_element_by_css_selector("#productDetailSpace > div.columnHeader > div").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("New", driver.find_element_by_css_selector("#productDetailSpace > div.columnHeader > div").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "saveProduct"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "newProduct"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("Setup Product or Accessory", driver.find_element_by_id("productName").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "label"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.XPATH, "//div[@id='productDetailSpace']/div/div[2]/label[2]"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Manufacturer:", driver.find_element_by_xpath("//div[@id='productDetailSpace']/div/div[3]/div/span[2]").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("--New Manufacturer--", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "addManufacturer"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Category:", driver.find_element_by_xpath("//div[@id='productDetailSpace']/div/div[3]/div[2]/span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "detailCategory"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue("Model:", driver.find_element_by_xpath("//div[@id='productDetailSpace']/div/div[4]/div/span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue("SKU:", driver.find_element_by_xpath("//div[@id='productDetailSpace']/div/div[4]/div[2]/span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue("Price:", driver.find_element_by_xpath("//div[@id='productDetailSpace']/div/div[4]/div[3]/span").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "detailModel"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "detailSeries"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "detailPrice"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Product Image 1 (slide show)", driver.find_element_by_css_selector("#slideshowSection > div.blockText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("+ AddImage", driver.find_element_by_css_selector("h2.mediaHeader").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Drag and DropImage\nfrom the Media list\n4:3\n720 px x 538 px\n(or higher for best results)", driver.find_element_by_css_selector("div.mediaBackground.uploadImage").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Product Image 2", driver.find_element_by_css_selector("#secondaryImageSection > div.blockText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("+ AddImage", driver.find_element_by_css_selector("#staticImageAssign > h2.mediaHeader").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Video", driver.find_element_by_css_selector("#videoSection > div.blockText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Drag and DropVideo\nfrom the Media list\n16:9\n1280 px x 720 px\n(or higher for best results)", driver.find_element_by_css_selector("div.mediaBackground.uploadVideo > span.spanText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Product Description", driver.find_element_by_css_selector("#descriptionSection > div.blockText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#videoSection > span.fold.unfolded"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#descriptionSection > span.fold"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_bold").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_italic").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_justifyleft").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_justifycenter").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_justifyright").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_justifyfull").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_bullist").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("", driver.find_element_by_css_selector("span.mceIcon.mce_numlist").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#additionalTextSection > div.blockText"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#additionalTextSection > span.fold"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_bold > span.mceIcon.mce_bold"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_italic > span.mceIcon.mce_italic"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_justifyleft > span.mceIcon.mce_justifyleft"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_justifycenter > span.mceIcon.mce_justifycenter"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_justifyright > span.mceIcon.mce_justifyright"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_justifyfull > span.mceIcon.mce_justifyfull"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_bullist > span.mceIcon.mce_bullist"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#detailAdditionalText_numlist > span.mceIcon.mce_numlist"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Keywords", driver.find_element_by_css_selector("#keywordsSection > div.blockText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#keywordsSection > span.fold"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "#mediaSpace > div.columnHeader"))
        try: self.assertEqual("Media", driver.find_element_by_css_selector("#mediaSpace > div.columnHeader > span.columnHeaderText").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        self.assertTrue(self.is_element_present(By.ID, "mediaSearchText"))
        try: self.assertTrue(self.is_element_present(By.ID, "mediaSearchButton"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "div.uploadNewMedia.commonButton"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        # ERROR: Caught exception [ERROR: Unsupported command [isTextPresent]]
        try: self.assertEqual("", driver.find_element_by_css_selector("span.uploadMediaButton.adder").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "footer"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "div.footerLogoImg > img"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Help", driver.find_element_by_xpath("//div[@id='footer']/div").text)
        except AssertionError as e: self.verificationErrors.append(str(e))

    def test_en_create_products_content_verification_help(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        driver.find_element_by_xpath("//div[@id='footer']/div").click()
        try: self.assertTrue(self.is_element_present(By.ID, "title"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertEqual("Help", driver.find_element_by_id("title").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"To create a new product, Click on the New button, Select the product radio button, then begin filling in all the product information. Click and drag images and videos from the media section into the slideshow, secondary image and video sections. Then under the Keywords section, begin selecting the keyword information.", driver.find_element_by_id("helpBody").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"To edit a product. Click on the Please select product dropdown and select the product you wish to edit.", driver.find_element_by_id("helpBody").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"To create a new Accessory, Click on the New button, select the accessory radio button, then begin filling in all the product information. Click and drag images and videos from the media section into the slideshow , secondary image and video sections.", driver.find_element_by_id("helpBody").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn(u"To Edit an Accessory, Click on the Please select product dropdown and select the accessory you wish to edit.", driver.find_element_by_id("helpBody").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_css_selector("img.exit").click()

    def test_en_create_products_function_create_manufacture(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        try: self.assertIn("ManTest", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertNotIn("MModifySuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        Select(driver.find_element_by_id("detailManufacturer")).select_by_visible_text("--New Manufacturer--")
        driver.find_element_by_id("addManufacturer").click()
        driver.find_element_by_id("manufacturerName").clear()
        driver.find_element_by_id("manufacturerName").send_keys("MCreateSuccess")
        driver.find_element_by_id("newManufacturer").click()
        driver.refresh()
        try: self.assertIn("MCreateSuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        Select(driver.find_element_by_id("detailManufacturer")).select_by_visible_text("ManTest")
        driver.find_element_by_id("addManufacturer").click()
        driver.find_element_by_id("manufacturerName").clear()
        driver.find_element_by_id("manufacturerName").send_keys("MModifySuccess")
        driver.find_element_by_id("saveManufacturer").click()
        for i in range(60):
            try:
                if u"MModifySuccess" == driver.find_element_by_css_selector("option[value=\"6\"]").text: break
            except: pass
            time.sleep(1)
        else: self.fail("time out")
        try: self.assertNotIn("ManTest", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("MModifySuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.refresh()
        try: self.assertNotIn("ManTest", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("MModifySuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        Select(driver.find_element_by_id("detailManufacturer")).select_by_visible_text("MModifySuccess")
        driver.find_element_by_id("addManufacturer").click()
        driver.find_element_by_id("manufacturerName").clear()
        driver.find_element_by_id("manufacturerName").send_keys("ManTest")
        driver.find_element_by_id("saveManufacturer").click()
        for i in range(60):
            try:
                if u"ManTest" == driver.find_element_by_css_selector("option[value=\"6\"]").text: break
            except: pass
            time.sleep(1)
        else: self.fail("time out")
        try: self.assertIn("ManTest", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertNotIn("MModifySuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        Select(driver.find_element_by_id("detailManufacturer")).select_by_visible_text("MCreateSuccess")
        driver.find_element_by_id("addManufacturer").click()
        driver.find_element_by_id("deleteManufacturer").click()
        driver.find_element_by_id("popup_ok").click()
        try: self.assertNotIn("MCreateSuccess", driver.find_element_by_id("detailManufacturer").text)
        except AssertionError as e: self.verificationErrors.append(str(e))

    def test_en_create_products_function_create_products(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        #Office:
        #driver.find_element_by_css_selector("#products_category155 > div.categoryBg.itemContent > span.fold").click()
        #Home:
        driver.find_element_by_css_selector("#products_category60 > div.categoryBg.itemContent > span.fold").click()
        try: self.assertNotIn("testMod", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("newProduct").click()
        driver.find_element_by_id("product").click()
        try: self.assertIn("New Product", driver.find_element_by_id("productName").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        Select(driver.find_element_by_id("detailManufacturer")).select_by_visible_text("CreatePro")
        Select(driver.find_element_by_id("detailCategory")).select_by_visible_text("TestCate")
        driver.find_element_by_id("detailModel").clear()
        driver.find_element_by_id("detailModel").send_keys("testMod")
        driver.find_element_by_id("detailSeries").clear()
        driver.find_element_by_id("detailSeries").send_keys("testSer")
        driver.find_element_by_id("detailPrice").clear()
        driver.find_element_by_id("detailPrice").send_keys("1000")
        driver.find_element_by_xpath("//div[@id='descriptionSection']/span").click()
        driver.find_element_by_css_selector("html").send_keys("test")
        driver.find_element_by_css_selector("span.mceIcon.mce_bold").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_italic").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_bold").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_italic").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_justifyleft").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_justifycenter").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_justifyright").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_justifyfull").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_bullist").click()
        driver.find_element_by_css_selector("span.mceIcon.mce_numlist").click()
        driver.find_element_by_xpath("//div[@id='additionalTextSection']/span").click()
        try: self.assertTrue(self.is_element_present(By.CSS_SELECTOR, "html"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        #driver.find_element_by_css_selector("html").clear()
        driver.find_element_by_css_selector("html").send_keys("test")
        driver.find_element_by_css_selector("#detailAdditionalText_bold > span.mceIcon.mce_bold").click()
        driver.find_element_by_css_selector("#detailAdditionalText_bold > span.mceIcon.mce_bold").click()
        driver.find_element_by_css_selector("#detailAdditionalText_italic > span.mceIcon.mce_italic").click()
        driver.find_element_by_css_selector("#detailAdditionalText_justifyleft > span.mceIcon.mce_justifyleft").click()
        driver.find_element_by_css_selector("#detailAdditionalText_justifycenter > span.mceIcon.mce_justifycenter").click()
        driver.find_element_by_css_selector("#detailAdditionalText_justifyright > span.mceIcon.mce_justifyright").click()
        driver.find_element_by_css_selector("#detailAdditionalText_justifyfull > span.mceIcon.mce_justifyfull").click()
        driver.find_element_by_css_selector("#detailAdditionalText_bullist > span.mceIcon.mce_bullist").click()
        driver.find_element_by_css_selector("#detailAdditionalText_numlist > span.mceIcon.mce_numlist").click()
        driver.find_element_by_xpath("//div[@id='keywordsSection']/span").click()
        Select(driver.find_element_by_id("keywordSelect0")).select_by_visible_text("test")
        driver.find_element_by_id("saveProduct").click()
        try: self.assertTrue(self.is_element_present(By.ID, "previewProduct"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertTrue(self.is_element_present(By.ID, "deleteProduct"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.refresh()
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        driver.find_element_by_css_selector("#products_category60 > div.categoryBg.itemContent > span.fold").click()
        try: self.assertIn("testMod", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
    def test_en_create_products_function_media_search(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        try: self.assertIn("defaultBackgroundImage.jpg", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("defaultSecondaryImage.jpg", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("defaultLogo.png", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("AVI_to_MPEG-4.avi", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("mediaSearchText").clear()
        driver.find_element_by_id("mediaSearchText").send_keys("defa")
        driver.find_element_by_id("mediaSearchButton").click()
        try: self.assertIn("defaultBackgroundImage.jpg", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("defaultSecondaryImage.jpg", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("defaultLogo.png", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertNotIn("AVI_to_MPEG-4.avi", driver.find_element_by_id("mediaSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))

    def test_en_create_products_function_product_search(self):
        driver = self.driver
        gb_login(self)
        driver.get(self.base_url + "/ev/createproducts")
        Select(driver.find_element_by_id("selectedFilterValue")).select_by_visible_text("Product")
        #driver.find_element_by_css_selector("div.blockText.selectedText").click()
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        #home
        driver.find_element_by_css_selector("#products_category73 > div.categoryBg.itemContent > span.fold").click()
        try: self.assertIn("aaaaaa", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("abcefg", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("abcd", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("ProdSearchC2", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("ProdSearchC", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("productSearch").clear()
        driver.find_element_by_id("productSearch").send_keys("ab")
        driver.find_element_by_id("productSearchButton").click()
        #driver.find_element_by_css_selector("div.blockText.selectedText").click()
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        try: self.assertNotIn("ProdSearchC2", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("ProdSearchC", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("productSearch").clear()
        driver.find_element_by_id("productSearch").send_keys("")
        Select(driver.find_element_by_id("selectedFilterValue")).select_by_visible_text("Invue Database")
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        try: self.assertIn("camera", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("cellphone", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("fishing rod", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("productSearch").clear()
        driver.find_element_by_id("productSearch").send_keys("test")
        driver.find_element_by_id("productSearchButton").click()
        driver.find_element_by_css_selector("div.bigDownArrow").click()
        try: self.assertNotIn("camera", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("cellphone", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
        try: self.assertIn("fishing rod", driver.find_element_by_id("productSpace").text)
        except AssertionError as e: self.verificationErrors.append(str(e))
    #This one is pending.
    def test_en_create_products_function_upload_media(self):
        pass

    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    testsuite = unittest.TestSuite()

    testsuite.addTest(EnCreateProducts("test_en_create_products_content_verification"))
    testsuite.addTest(EnCreateProducts("test_en_create_products_content_verification_help"))
    testsuite.addTest(EnCreateProducts("test_en_create_products_function_create_manufacture"))
    testsuite.addTest(EnCreateProducts("test_en_create_products_function_create_products"))
    testsuite.addTest(EnCreateProducts("test_en_create_products_function_media_search"))
    testsuite.addTest(EnCreateProducts("test_en_create_products_function_product_search"))
    filename = gb_filename_prefix+'/CreateProducts.html'
    fp = file(filename,'wb')

    runner = HTMLTestRunner.HTMLTestRunner(
            stream=fp,
            title='Test Result',
            description='Test Report'
            )
 #   runner = unittest.TextTestRunner()
    runner.run(testsuite)
